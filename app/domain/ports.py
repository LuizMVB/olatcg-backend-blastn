from __future__ import annotations
from typing import Protocol, Dict, Optional
from .models import AnalysisInput, HomologyResults, TaxonomyNodes, TaxonomyNames


class StorageService(Protocol):
    def store_compressed(self, file_path: str, analysis_id: int, file_type: str) -> str: ...
    def decompress_to_temp(self, gzip_path: str, suffix: str) -> str: ...


class BlastExecutor(Protocol):
    def run_archive(self, query_gzip_path: str, analysis_id: int, db: str, evalue: float,
                    gapopen: Optional[int], gapextend: Optional[int], penalty: Optional[int]) -> str: ...
    def archive_to_fmt6(self, archive_gzip_path: str, analysis_id: int) -> str: ...


class TaxonomyRepository(Protocol):
    def get_taxid_map(self) -> Dict[str, str]: ...
    def get_nodes(self) -> TaxonomyNodes: ...
    def get_names(self) -> TaxonomyNames: ...


class AnalysisRepository(Protocol):
    def insert_input(self, created_at, command, analysis_id: int) -> int: ...
    def insert_output(self, created_at, results: Dict, file_path: str, input_id: int) -> None: ...
    def update_status(self, analysis_id: int, status: str) -> None: ...
